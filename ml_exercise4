#22.Implement multiple linear regression model for house price detection data
#available on Moodle using Scikit learn, check for R2 and Adjusted R2. Also
#perform data preprocessing, such as feature scaling, hot encoding if needed.



import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score
from sklearn.preprocessing import MinMaxScaler

#I;m loading the dataset of house prediction prices 
data = pd.read_csv(r'C:\Users\Janna\Desktop\House price prediction data.csv')


data_cleaned = data.dropna() # i wanted to remove missing values in case we had them in the data so that it doesn't have
#an impact on our model


#Here, I perform one hot encoding so that the categorical variables of the dataset become numeric ones. If we don't do this
# we can't really work with the data, it needs to be transformed properly.
data_transformed = pd.get_dummies(data_cleaned, 
                                  drop_first=True) 

predictors = data_transformed.drop(columns=['price'])  # i drop the price column, because in the next step,
#we make predictions for price
target_variable = data_transformed['price']


# I decided to use MinMaxScaling, because it prevents features with large values and this way the model performs efficiently.
normalizer = MinMaxScaler()
normalized_features = normalizer.fit_transform(predictors)

#I'm splitting the data into train and test sets. 80% of it will be used for training and the rest for testing.
train_features, test_features = train_test_split(normalized_features, 
                                                 
                                   test_size =0.2,
                                                 
                                   random_state =123)

train_target, test_target = train_test_split(target_variable,
                                   
                                   test_size=0.2,
                                   
                                   random_state=123)


#Now, I'm creating the linear regression model and using our train data.
house_price_model = LinearRegression()

house_price_model.fit(train_features,
                      train_target)
predicted_values = house_price_model.predict(test_features)

#R² measures how well the model explains the variance in house prices and Adjusted R² 
#accounts for the number of predictors in the model.
#If new features do not improve the model, Adjusted R² will decrease.

r_squared = r2_score(test_target, predicted_values)
total_samples = len(test_target)
total_features = test_features.shape[1]
adj_r_squared = 1 - ((1 - r_squared) * (total_samples - 1) / (total_samples - total_features - 1))

#Finally I print the results.
print(f"R² will be : {r_squared:.4f}")

print(f"Adjusted R² will be: {adj_r_squared:.4f}")


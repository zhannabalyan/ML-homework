#23.Generate linear data with two classes, and create a logistic regression model
#using Scikit learn.

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.preprocessing import MinMaxScaler


#Here I generate 250 random samples where there are 5 features in each, 3 informative features,1 redundant feature,
# and lastly I use binary classification.

features, labels = make_classification(n_samples=250,
                                       n_features=5, 
                                       n_informative=3,
                                       n_redundant=1,
                                       n_repeated=0,
                                       n_classes=2, 
                                       random_state=21)

#I'm once again splitting the data into test and train parts like I did in the previous example and again using 80% data for
#training and 20% for testing.
input_train, input_test = train_test_split(features,
                                           test_size=0.2,
                                           random_state=21)

output_train, output_test = train_test_split(labels,
                                             test_size=0.2,
                                             random_state=21)

# I use MinMax scaling again as it helps the regression converge faster and perform more efficiently.
normalizer = MinMaxScaler()

input_train = normalizer.fit_transform(input_train)

input_test = normalizer.transform(input_test)

#Creating the regression here using our normalized training data.
classifier = LogisticRegression()

classifier.fit(input_train, 
               output_train)

#Finally we make the prediction.
predicted_value = classifier.predict(input_test)

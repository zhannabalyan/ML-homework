# 20.Implement a simple linear regression model using gradient descent
#algorithm to predict salary given years of experience (data is available on
#Moodle), without using Scikit-Learn.

#Data points are taken from moodle and will be rewritten below.
#We'll store them in two according arrays each containing the number of years of experience and their corresponding earnings.

experience = np.array([5.6, 7.2,
                       3.1,4.4,
                       1.0, 6.7,
                       1.2,5.4,
                       9.8,2.2,
                       3.5, 20.0,
                       17.6,1.3, 
                       1.7, 2.4,
                       5.4, 6.8,
                       4.9,19.0])


earnings = np.array([75000, 120000,
                     47000, 37000, 
                     16000,140000,
                     14000, 80000, 
                     150000, 16000,
                     50000, 160000, 
                     165000, 17500,
                     20000, 20000, 
                     84000, 93000, 
                     75000, 140000])


#Here, I initialized how much we will adjust the parameters in every step, the number of times we will update the parameters,
#initial weight and bias and the total number of points in the data.
step_size = 0.01
steps_number = 1200
weight = 0  
bias = 0 
data_size = len(experience)

#With this for loop we train the model using gradient descent method. We start with the already initialized parameters, then
#we compute predicted salaries, then we calculate the error between actual and predicted earnings. After this we compute
#the gradients using derivatives and update weight and bias initial parameters. We repeat this process and I also decided
#to keep track of the loss.
for step in range(steps_number):
    
    predicted_values = weight * experience + bias
    
    error = earnings - predicted_values
    
    gradient_w = (-2 / data_size) * np.sum(experience * error)
    gradient_b = (-2 / data_size) * np.sum(error)
    
    
    weight -= step_size * gradient_w
    bias -= step_size * gradient_b
    
    loss_value = np.mean(error ** 2)
    
    if step % 100 == 0:
        print(f"Step {step}: Loss = {loss_value:.4f}")
        
    
#Now that I did the main part, I write a function that uses our weight and bias above to predict
#the salary for a random given number of years of experience.

def estimate_salary(experience_years):
    
    return weight * experience_years + bias

years_of_experience = 50

salary_estimate = estimate_salary(years_of_experience)

#Printing the results.

print(f"Estimated salary for {years_of_experience} years of experience: {salary_estimate:.2f}")

# 26. Generate a non-linear data set with two classes. Implement SVM model to
#classify this non-linear data set using kernel trick.


import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_moons
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import accuracy_score


#Here, I generate a dataset, which is going to include 700 samples and is also going to have some randomness(noise).
features, labels = make_moons(n_samples=700,
                             noise=0.15,
                             random_state=27)


#Splitting into train and test sets.This time I used 85% of the data for training and kept the other 15% for testing process.
train_input, test_input, train_output, test_output = train_test_split(
    features, labels, test_size=0.15, random_state=27
)

#using minmax scaling here again.
scl = MinMaxScaler()
scaled_input_train = scl.fit_transform(train_input)

scaled_input_test = scl.fit_transform(test_input)

#This does the same thing that I explained in the previous example about the kernel's purpose.
svm_classifier = SVC(kernel= "rbf",
                     
                     C= 5,
                     
                     gamma= "auto")

svm_classifier.fit(scaled_input_train, 
                   
                   train_output)

#Finally making the predictions
predicted_output = svm_classifier.predict(scaled_input_test)

model_accuracy = accuracy_score(test_output, predicted_output)

print(f"Test Accuracy will be: {model_accuracy:.4f}")
